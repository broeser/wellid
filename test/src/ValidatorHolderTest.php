<?php

namespace Wellid;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-24 at 16:30:01.
 */
class ValidatorHolderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ValidatorHolder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ValidatorHolder;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Wellid\ValidatorHolder::addValidator
     * @covers Wellid\ValidatorHolder::getValidators
     */
    public function testAddValidator() {
        $this->assertEmpty($this->object->getValidators());

        $validator = new Validator\Boolean();

        $this->assertInstanceOf('Wellid\ValidatorHolderInterface', $this->object->addValidator($validator));

        $this->assertCount(1, $this->object->getValidators());

        $this->assertContainsOnlyInstancesOf(get_class($validator), $this->object->getValidators());
    }

    /**
     * @covers Wellid\ValidatorHolder::addValidators
     * @depends testAddValidator
     */
    public function testAddValidators() {
        $this->assertEmpty($this->object->getValidators());

        $this->assertInstanceOf('Wellid\ValidatorHolderInterface', $this->object->addValidators(new Validator\Boolean(), new Validator\MIME('text/plain'), new Validator\MinLength(3)));

        $this->assertCount(3, $this->object->getValidators());

        $this->assertContainsOnlyInstancesOf('Wellid\Validator\ValidatorInterface', $this->object->getValidators());
    }

    /**
     * Dataprovider for testValidateValue
     * 
     * @return array
     */
    public function dataProvider() {
        return array(false, null, PHP_EOL, 14, 0.009, -10000, 'ABC', '   ', '', array(), new \stdClass());
    }

    /**
     * @covers Wellid\ValidatorHolder::validateValue
     * @dataProvider dataProvider
     * @depends testAddValidators
     * @param mixed $value
     */
    public function testValidateValue($value) {
        $this->assertEmpty($this->object->getValidators());

        $v1 = $this->object->validateValue($value);
        $this->assertInstanceOf('Wellid\ValidationResultSet', $v1);
        $this->assertTrue($v1->hasPassed());
        $this->assertNull($v1->firstError());

        $this->object->addValidators(new Validator\FloatingPoint(), new Validator\Min(0));

        $v2 = $this->object->validateValue($value);
        $this->assertInstanceOf('Wellid\ValidationResultSet', $v2);
        $this->assertFalse($v2->hasPassed());
        $this->assertInstanceOf('Wellid\ValidationResult', $v2->firstError());
    }

}
