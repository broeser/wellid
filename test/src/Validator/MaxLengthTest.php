<?php

namespace Wellid\Validator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-21 at 15:31:01.
 */
class MaxLengthTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MaxLength
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MaxLength(7);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Wellid\Validator\MaxLength::validate
     * @dataProvider stringProvider
     * @param mixed $value
     * @param boolean $expected
     */
    public function testValidate($value, $expected) {
        $result = $this->object->validate($value);

        $this->assertInstanceOf('Wellid\ValidationResult', $result);

        if ($expected) {
            $this->assertTrue($result->hasPassed());
            $this->assertFalse($result->isError());
            $this->assertEmpty($result->getMessage());
            $this->assertEquals(\Wellid\ValidationResult::ERR_NONE, $result->getCode());
            $this->assertEquals('passed', (string) $result);
        } else {
            $this->assertFalse($result->hasPassed());
            $this->assertTrue($result->isError());
            $this->assertNotEmpty($result->getMessage());
            $this->assertNotEquals(\Wellid\ValidationResult::ERR_NONE, $result->getCode());
            $this->assertNotEquals('passed', (string) $result);
        }
    }

    /**
     * Dataprovider for testValidate and testValidateBool
     * 
     * @return array()
     */
    public function stringProvider() {
        return array(
            array(null, true),
            array(4, true),
            array(false, true),
            array('aaaa', true),
            array('Yellow1', true),
            array(12345678, false),
            array('87654321', false),
            array('sdf klöökl sdfsdf', false),
            array('00123456', false)
        );
    }

    /**
     * @covers Wellid\Validator\MaxLength::validateBool
     * @dataProvider stringProvider
     * @param mixed $value
     * @param boolean $expected
     */
    public function testValidateBool($value, $expected) {
        $this->assertEquals($expected, $this->object->validateBool($value));
    }

}
