<?php

namespace Wellid\Validator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-24 at 16:30:18.
 */
class BooleanTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Boolean
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Boolean;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Wellid\Validator\Boolean::validate
     * @dataProvider booleanProvider
     * @param mixed $value
     * @param boolean $expected
     */
    public function testValidate($value, $expected) {
        $result = $this->object->validate($value);

        $this->assertInstanceOf('Wellid\ValidationResult', $result);

        if ($expected) {
            $this->assertTrue($result->hasPassed());
            $this->assertFalse($result->isError());
            $this->assertEmpty($result->getMessage());
            $this->assertEquals(\Wellid\ValidationResult::ERR_NONE, $result->getCode());
            $this->assertEquals('passed', (string) $result);
        } else {
            $this->assertFalse($result->hasPassed());
            $this->assertTrue($result->isError());
            $this->assertNotEmpty($result->getMessage());
            $this->assertNotEquals(\Wellid\ValidationResult::ERR_NONE, $result->getCode());
            $this->assertNotEquals('passed', (string) $result);
        }
    }

    /**
     * Dataprovider for testValidate and testValidateBool
     * 
     * @return array()
     */
    public function booleanProvider() {
        return array(
            array(null, false),
            array('TRUE', true),
            array('yes', true),
            array('yeS', true),
            array(1, true),
            array(1.0, true),
            array(1.1, false),
            array('yeah', false),
            array('xxx', false),
            array('FALSE', true),
            array(false, true),
            array(true, true),
            array(0.1, false),
            array(0.999, false),
            array(434, false),
            array('off', true),
            array('NO', true),
            array('', true)
        );
    }

    /**
     * 
     */
    public function testArrayAndObjectValidation() {
        $this->assertFalse($this->object->validateBool(array(true)));
        $x = new \stdClass();
        $x->y = 'z';
        $this->assertFalse($this->object->validateBool($x));
    }

    /**
     * @covers Wellid\Validator\Boolean::validateBool
     * @dataProvider booleanProvider
     * @param mixed $value
     * @param boolean $expected
     */
    public function testValidateBool($value, $expected) {
        $this->assertEquals($expected, $this->object->validateBool($value));
    }

}
