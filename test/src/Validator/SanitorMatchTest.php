<?php

namespace Wellid\Validator;

class TestSanitizable implements \Wellid\SanitorBridgeInterface {

    use \Wellid\SanitorBridgeTrait;

    public function __construct() {
        $this->setSanitizer(new \Sanitor\Sanitizer(FILTER_SANITIZE_EMAIL));
    }

}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-25 at 12:51:14.
 */
class SanitorMatchTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var SanitorMatch
     */
    protected $object;

    /**
     *
     * @var \Wellid\SanitorBridgeInterface
     */
    protected $testSanitizable;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->testSanitizable = new TestSanitizable();
        $this->testSanitizable->addSanitorMatchValidator();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Provides values and whether they look the same after sanitization
     * 
     * @return array[]
     */
    public function dataProvider() {
        return array(
            array('mail@benedictroeser.de', true),
            array('mail@benedi\ctroeser.de', false)
        );
    }

    /**
     * @covers Wellid\Validator\SanitorMatch::validate
     * @dataProvider dataProvider
     * @param mixed $value
     * @param boolean $expected
     */
    public function testValidate($value, $expected) {
        $this->testSanitizable->setRawValue($value);
        $result = $this->testSanitizable->validate();

        $this->assertInstanceOf('Wellid\ValidationResultSet', $result);

        if ($expected) {
            $this->assertTrue($result->hasPassed());
            $this->assertFalse($result->hasErrors());
            $this->assertNull($result->firstError());
        } else {
            $this->assertFalse($result->hasPassed());
            $this->assertTrue($result->hasErrors());
            $this->assertNotEmpty($result->firstError()->getMessage());
            $this->assertNotEquals(\Wellid\ValidationResult::ERR_NONE, $result->firstError()->getCode());
            $this->assertNotEquals('passed', (string) $result->firstError());
        }
    }

    /**
     * @covers Wellid\Validator\SanitorMatch::validateBool
     * @dataProvider dataProvider
     * @param mixed $value
     * @param boolean $expected
     */
    public function testValidateBool($value, $expected) {
        $this->testSanitizable->setRawValue($value);
        $this->assertEquals($expected, $this->testSanitizable->validateBool());
    }

}
